// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Timers;
using Foundation;
using UIKit;

namespace Scattergories
{
	public partial class Dashboard_Controller : UIViewController
	{
        char[] diceLetters = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'W' };
        float _secs;
        Timer _timer;

        public Dashboard_Controller (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            _letterTitleLabel.Text = "Lettre";
            _letterLabel.Font = UIFont.BoldSystemFontOfSize(16.0f);

            _letterLabel.Font = UIFont.BoldSystemFontOfSize(60.0f);

            ChooseNewLetter();

            _timerTitleLabel.Text = "Compteur";
            _timerTitleLabel.Font = UIFont.BoldSystemFontOfSize(16.0f);

            _newGameButton.TitleLabel.Text = "Nouvelle Partie";
            _secs = _timerSlider.Value;

            _timerLabel.Text = FormatSeconds(_timerSlider.Value);

            _timerSlider.ValueChanged += (sender, e) =>
            {
                _timerLabel.Text = FormatSeconds(_timerSlider.Value);
                _secs = _timerSlider.Value;
            };

            _newGameButton.SetTitle("Nouvelle partie", UIControlState.Normal);

            _newGameButton.Layer.BorderWidth = 1;
            _newGameButton.Layer.CornerRadius = 15;
            _newGameButton.Layer.BorderColor = UIColor.Black.CGColor;

            _newGameButton.UserInteractionEnabled = true;
            _newGameButton.TouchUpInside += _newGameButton_TouchUpInside;

            _timerLabel.Font = UIFont.BoldSystemFontOfSize(25.0f);

            _stopButton.SetTitle("Stop", UIControlState.Normal);
            _stopButton.UserInteractionEnabled = true;
            _stopButton.TouchUpInside += _stopButton_TouchUpInside;

            _stopButton.Layer.BorderWidth = 1;
            _stopButton.Layer.CornerRadius = 15;
            _stopButton.Layer.BorderColor = UIColor.Black.CGColor;

        }

        void _stopButton_TouchUpInside(object sender, EventArgs e)
        {
            if (_timer != null)
                _timer.Stop();
        }


        void _newGameButton_TouchUpInside(object sender, EventArgs e)
        {
            ChooseNewLetter();

            if(_timer != null)
            {
                _timer.Stop();
                _timer.Elapsed -= _timer_Elapsed;
                _timer = null;
            }

            _timer = new Timer(1000);
            _timer.Elapsed += _timer_Elapsed;
            _timer.Enabled = true;
            _timer.Start();

        }

        void _timer_Elapsed(object sender, ElapsedEventArgs e)
        {
            _secs -= 1;
            InvokeOnMainThread(() => { _timerLabel.Text = FormatSeconds(_secs); });
        }


        private string FormatSeconds(float secs)
        {
            TimeSpan time = TimeSpan.FromSeconds(secs);
            return time.ToString(@"mm\:ss");
        }

        void ChooseNewLetter()
        {
            var random = new Random();
            int index = random.Next(diceLetters.Length);
            _letterLabel.Text = diceLetters[index].ToString();
        }

    }
}
